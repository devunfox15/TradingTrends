datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]
  Order     Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  image         String
  price         Float
  liked         Boolean        @default(false)
  category      String
  ratings       Rating[]
  cartItems     Cart[]
  orderProducts OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        String  @id @default(cuid())
  rate      Float
  count     Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Cart {
  id          String @id @default(cuid())
  quantity    Int
  totalAmount Float
  productId   Int
  userId      String

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String         @id @default(uuid())
  totalAmount   Float
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  orderProducts OrderProduct[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
